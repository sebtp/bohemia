/* scss/utilities/_mixins.scss */


// Mixin: Fluid Type
@mixin fluid-type($properties, $min-vw, $max-vw, $min-value, $max-value) {
  $min-vw-adj: $min-vw * 1.6; //fix for the 16px base font issue
  $max-vw-adj: $max-vw * 1.6; //fix for the 16px base font issue
  & {
    @each $property in $properties {
      #{$property}: $min-value;
    }

    @media screen and (min-width: $min-vw) {
      @each $property in $properties {
        #{$property}: calc(#{$min-value} + #{strip-unit($max-value - $min-value)} * ((100vw - #{$min-vw-adj}) / #{strip-unit($max-vw-adj - $min-vw-adj)}));
      }
    }

    @media screen and (min-width: $max-vw) {
      @each $property in $properties {
        #{$property}: $max-value;
      }
    }
  }
}

// Mixin: Fluid Type based on the vh
@mixin fluid-type-vh($properties, $min-vh, $max-vh, $min-value, $max-value) {
  $min-vh-adj: $min-vh * 1.6; //fix for the 16px base font issue
  $max-vh-adj: $max-vh * 1.6; //fix for the 16px base font issue
  & {
    @each $property in $properties {
      #{$property}: $min-value;
    }

    @media screen and (min-height: $min-vh) {
      @each $property in $properties {
        #{$property}: calc(#{$min-value} + #{strip-unit($max-value - $min-value)} * ((100vh - #{$min-vh-adj}) / #{strip-unit($max-vh-adj - $min-vh-adj)}));
      }
    }

    @media screen and (min-height: $max-vh) {
      @each $property in $properties {
        #{$property}: $max-value;
      }
    }
  }
}

// Mixin: Fluid Type REVERSE - Where the first value is bigger than the second one
@mixin fluid-type-reverse($properties, $min-vw, $max-vw, $max-value, $min-value) {
  $min-vw-adj: $min-vw * 1.6; //fix for the 16px base font issue
  $max-vw-adj: $max-vw * 1.6; //fix for the 16px base font issue
  & {
    @each $property in $properties {
      #{$property}: $max-value;
    }

    @media screen and (min-width: $min-vw) {
      @each $property in $properties {
      //#{$property}: calc(#{$min-value} + #{strip-unit($max-value - $min-value)} * ((100vw - #{$min-vw-adj}) / #{strip-unit($max-vw-adj - $min-vw-adj)}));
		#{$property}: calc(#{$max-value} + #{strip-unit($min-value - $max-value)} * ((100vw - #{$min-vw-adj}) / #{strip-unit($max-vw-adj - $min-vw-adj)}));
      }
    }

    @media screen and (min-width: $max-vw) {
      @each $property in $properties {
        #{$property}: $min-value;
      }
    }
  }
}

@function strip-unit($value) {
  @return $value / ($value * 0 + 1);
}

// linear gradient - text
@mixin linear-gradient-text($direction, $colors...) {
	background: -webkit-linear-gradient($direction, $colors);
	background: -moz-linear-gradient($direction, $colors);
	background: -o-linear-gradient($direction, $colors);
	background: -ms-linear-gradient($direction, $colors);
	background: linear-gradient($direction, $colors);
	-webkit-background-clip: text;
	background-clip: text;
	-webkit-text-fill-color: transparent;
	text-fill-color: transparent;
	display: inline-block;
}

//REMOVE linear gradient - text
@mixin remove-gradient-text() {
	background: none;
	-webkit-background-clip: border-box;
	background-clip: border-box;
	-webkit-text-fill-color: currentcolor;
	text-fill-color: currentcolor;
	//display: inline-block;
}

// linear gradient - img
@mixin linear-gradient-img($direction, $colors...) {
	background-image: -webkit-linear-gradient($direction, $colors);
	background-image: -moz-linear-gradient($direction, $colors);
	background-image: -o-linear-gradient($direction, $colors);
	background-image: -ms-linear-gradient($direction, $colors);
	background-image: linear-gradient($direction, $colors);
}

// linear gradient - border
@mixin linear-gradient-border($direction, $colors...) {
    -webkit-border-image: -webkit-linear-gradient($direction, $colors);
    -moz-border-image: -moz-linear-gradient($direction, $colors);  
    -o-border-image: -o-linear-gradient($direction, $colors);
    border-image: linear-gradient($direction, $colors);
	border-image-slice: 1
}



/* transition syntax
		<name>
		<duration>
		<timing-function>
		<delay> */

@mixin transition($args...) {
	-webkit-transition: $args;
	-moz-transition: $args;
	-o-transition: $args;
	transition: $args;
}

/* animation: 
		<name> 
		<duration>
		<timing-function>
		<delay>
		<iteration-count>
		<direction>
		<fill-mode> */
	
@mixin animation ($args...) {
	-webkit-animation: $args;
	-moz-animation: $args;
	-o-animation: $args;
	animation: $args;
}


/* transform: 
		<name> 
		<duration>
		<timing-function>
		<delay>
		<iteration-count>
		<direction>
		<fill-mode> */
	
@mixin transform ($args...) {
	-webkit-transform: $args;
	-moz-transform: $args;
	-o-transform: $args;
	transform: $args;
}